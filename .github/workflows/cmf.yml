name: Build Nothing Tetris Kernel (No Sudo)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 360

    env:
      WORKDIR: $HOME/kernel_build
      OUTDIR: $HOME/kernel_build/out
      CCACHE_DIR: $HOME/.ccache

    steps:
      - uses: actions/checkout@v4

      - name: Prep dirs and ccache
        run: |
          mkdir -p "$WORKDIR" "$OUTDIR" "$CCACHE_DIR"
          which ccache && ccache -M 50G || true

      - name: Fetch prebuilt LLVM/Clang and tools (user space)
        run: |
          set -eux
          cd "$WORKDIR"
          # Proton Clang example (adjust version if needed)
          curl -L -o clang.tar.gz https://github.com/kdrag0n/proton-clang/releases/download/2024.08.18/proton-clang-20240818.tar.zst || \
          wget -O clang.tar.zst https://github.com/kdrag0n/proton-clang/releases/download/2024.08.18/proton-clang-20240818.tar.zst
          # handle either curl or wget file name
          fname=$(ls clang.tar.*)
          mkdir -p toolchain && tar --zstd -xf "$fname" -C toolchain
          echo "$WORKDIR/toolchain/bin" >> $GITHUB_PATH
          echo "PATH=$WORKDIR/toolchain/bin:$PATH" >> $GITHUB_ENV

      - name: Clone kernel source
        run: |
          cd "$WORKDIR"
          git clone --depth=1 -b Tetris-2 https://github.com/abdulla-lin/android_kernel_6.1_nothing_mt6878.git kernel-6.1

      - name: Clone device modules
        run: |
          cd "$WORKDIR"
          git clone --depth=1 -b mt6878/Tetris/u https://github.com/abdulla-lin/android_kernel_device_modules_6.1_nothing_mt6878.git kernel_device_modules-6.1

      - name: Clone vendor kernel modules
        run: |
          cd "$WORKDIR"
          git clone --depth=1 -b mt6878/Tetris/u https://github.com/abdulla-lin/android_kernel_modules_nothing_mt6878.git vendor/mediatek/kernel_modules

      - name: Fix build.config paths
        run: |
          cd "$WORKDIR"/kernel_device_modules-6.1
          cp build.config.mtk_kernel_device_modules build.config
          mkdir -p kernel_device_modules-6.1
          cp build.config.mtk_kernel_device_modules kernel_device_modules-6.1/build.config.mtk.aarch64.mgk

      - name: Build
        run: |
          cd "$WORKDIR"/kernel_device_modules-6.1
          export PATH="$WORKDIR/toolchain/bin:$PATH"
          export CCACHE_DIR="$CCACHE_DIR"
          export CC="clang"
          export LLVM=1 LLVM_IAS=1
          export MAKEFLAGS="-j$(nproc)"
          export CLANG_MAX_JOBS=$(nproc)
          bash build.sh

      - name: Collect artifacts
        run: |
          mkdir -p "$WORKDIR/artifacts"
          cp -v $WORKDIR/out/android14-6.1/dist/Image* "$WORKDIR/artifacts/" || true
          cp -v $WORKDIR/out/android14-6.1/dist/*.img "$WORKDIR/artifacts/" || true
          cp -rv $WORKDIR/out/android14-6.1/dist/modules "$WORKDIR/artifacts/" || true
          (cd "$WORKDIR/artifacts" && zip -r ../kernel_artifacts.zip .)

      - name: Upload kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel_artifacts
          path: ${{ env.WORKDIR }}/kernel_artifacts.zip

      - name: AnyKernel3 packaging
        run: |
          cd "$WORKDIR"
          git clone --depth=1 https://github.com/WildPlusKernel/AnyKernel3.git AnyKernel3
          cp -v $WORKDIR/out/android14-6.1/dist/Image* AnyKernel3/ || true
          cp -v $WORKDIR/out/android14-6.1/dist/dtbo.img AnyKernel3/ || true
          cp -v $WORKDIR/out/android14-6.1/dist/vendor_dlkm.img AnyKernel3/ || true
          cp -v $WORKDIR/out/android14-6.1/dist/system_dlkm.img AnyKernel3/ || true
          (cd AnyKernel3 && zip -r9 ../CMF_Kernel-6.1-$(date +%Y%m%d-%H%M%S).zip .)

      - name: Upload flashable ZIP
        uses: actions/upload-artifact@v4
        with:
          name: CMF_Kernel-Flashable-ZIP
          path: ${{ env.WORKDIR }}/CMF_Kernel-6.1-*.zip
