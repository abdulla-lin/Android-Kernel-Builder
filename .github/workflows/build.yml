name: Build GKI Kernel (AnyKernel3 + Modules)

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v3
        with:
          repository: abdulla-lin/android_kernel_6.1_nothing_mt6878
          ref: main
          submodules: recursive

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y git device-tree-compiler lz4 xz-utils zlib1g-dev openjdk-17-jdk gcc g++ python3 python-is-python3 p7zip-full \
              android-sdk-libsparse-utils erofs-utils default-jdk gnupg flex bison gperf build-essential zip curl libc6-dev libncurses-dev \
              libx11-dev libreadline-dev libgl1 libgl1-mesa-dev python3-markdown libxml2-utils xsltproc libtinfo6 make repo cpio kmod \
              openssl libelf-dev pahole libssl-dev libarchive-tools zstd --fix-missing
          wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb
          sudo dpkg -i libtinfo5_6.3-2ubuntu0.1_amd64.deb || true

      - name: Setup Neutron-Clang Toolchain
        run: |
          mkdir -p $HOME/toolchains/neutron-clang
          cd $HOME/toolchains/neutron-clang
          curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"
          chmod +x antman
          bash antman -S

      - name: Set Environment Variables
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "PATH=$HOME/toolchains/neutron-clang/bin:$PATH" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=cmf" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=github" >> $GITHUB_ENV
          echo "LOCALVERSION=-NeutronClang" >> $GITHUB_ENV

      - name: Build Kernel (Image.gz-dtb + modules)
        run: |
          rm -rf out build
          mkdir -p out build
          make -C $GITHUB_WORKSPACE O=$GITHUB_WORKSPACE/out gki_defconfig
          make -C $GITHUB_WORKSPACE O=$GITHUB_WORKSPACE/out -j$(nproc) \
            CC=clang \
            AR=llvm-ar \
            NM=llvm-nm \
            LD=ld.lld \
            STRIP=llvm-strip \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            READELF=llvm-readelf \
            HOSTCC=clang \
            HOSTCXX=clang++ \
            HOSTLD=ld.lld

          # Copy kernel image
          cp out/arch/arm64/boot/Image.gz-dtb build/

          # Build modules
          make -C $GITHUB_WORKSPACE O=$GITHUB_WORKSPACE/out -j$(nproc) modules \
            CC=clang LD=ld.lld
          make -C $GITHUB_WORKSPACE O=$GITHUB_WORKSPACE/out -j$(nproc) modules_install \
            INSTALL_MOD_PATH=$GITHUB_WORKSPACE/modules \
            INSTALL_MOD_STRIP=1

          # Prepare vendor modules dir
          mkdir -p build/vendor/lib/modules
          cp -r modules/lib/modules/* build/vendor/lib/modules/

      - name: Prepare AnyKernel3
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel
          cp build/Image.gz-dtb AnyKernel/
          mkdir -p AnyKernel/modules/vendor/lib/modules
          cp -r build/vendor/lib/modules/* AnyKernel/modules/vendor/lib/modules/
          sed -i 's/kernelstring=.*/kernelstring="CMF GKI Kernel - NeutronClang"/' AnyKernel/anykernel.sh
          cd AnyKernel
          zip -r9 ../Kernel-AnyKernel.zip *

      - name: Upload Raw Kernel
        uses: actions/upload-artifact@v4
        with:
          name: raw-kernel
          path: build/Image.gz-dtb

      - name: Upload Vendor Modules
        uses: actions/upload-artifact@v4
        with:
          name: vendor-modules
          path: build/vendor/lib/modules

      - name: Upload Flashable AnyKernel3 Zip
        uses: actions/upload-artifact@v4
        with:
          name: flashable-kernel
          path: Kernel-AnyKernel.zip
          
