name: Build CMF Kernel + GPU Userspace Helper (GSI-ready)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
    - name: Checkout kernel source
      uses: actions/checkout@v4
      with:
        repository: abdulla-lin/android_kernel_6.1_nothing_mt6878
        ref: main

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          bc bison build-essential cpio curl flex git libssl-dev \
          libncurses5-dev zlib1g-dev libelf-dev dwarves \
          wget unzip xz-utils tar clang lld llvm binutils pkg-config

    - name: Setup LLVM toolchain env
      run: |
        # if you have prebuilts in repo, use them; fall back to system clang
        if [ -d "$GITHUB_WORKSPACE/prebuilts/clang/host/linux-x86/clang-17.0.2/bin" ]; then
          echo "Using repo prebuilts/clang"
          echo "PATH=$GITHUB_WORKSPACE/prebuilts/clang/host/linux-x86/clang-17.0.2/bin:$PATH" >> $GITHUB_ENV
        else
          echo "Using system clang"
        fi
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "SUBARCH=arm64" >> $GITHUB_ENV
        echo "CC=clang" >> $GITHUB_ENV
        echo "LLVM=1" >> $GITHUB_ENV
        echo "LLVM_IAS=1" >> $GITHUB_ENV

    - name: Add SUSFS to kernel tree
      run: |
        git clone --depth=1 https://github.com/abdulla-lin/susfs4ksu-module.git susfs_temp
        mkdir -p drivers/misc/susfs
        cp -r susfs_temp/* drivers/misc/susfs/
        rm -rf susfs_temp
        # Makefile & Kconfig for kernel integration (if not present)
        if ! grep -q "obj-$(CONFIG_SUSFS)" drivers/misc/susfs/Makefile 2>/dev/null; then
          echo 'obj-$(CONFIG_SUSFS) += susfs.o' > drivers/misc/susfs/Makefile
        fi
        if [ ! -f drivers/misc/susfs/Kconfig ]; then
          cat > drivers/misc/susfs/Kconfig <<'EOF'
config SUSFS
	tristate "Susfs support"
	default y
	help
	  Susfs file system support.
EOF
        fi

    - name: Clone KernelSU module
      run: |
        git clone --depth=1 https://github.com/abdulla-lin/KernelSU.git kernelsu_temp
        mkdir -p drivers/misc/kernelsu
        cp -r kernelsu_temp/* drivers/misc/kernelsu/
        rm -rf kernelsu_temp
        if ! grep -q "obj-$(CONFIG_KERNELSU)" drivers/misc/kernelsu/Makefile 2>/dev/null; then
          echo 'obj-$(CONFIG_KERNELSU) += kernelsu.o' > drivers/misc/kernelsu/Makefile
        fi
        if [ ! -f drivers/misc/kernelsu/Kconfig ]; then
          cat > drivers/misc/kernelsu/Kconfig <<'EOF'
config KERNELSU
	tristate "KernelSU support"
	default y
	help
	  KernelSU root support.
EOF
        fi

    - name: Add GPU userspace helper files (drivers/misc)
      run: |
        # Ensure directory exists
        mkdir -p drivers/misc

        # Append Makefile entry (create if missing)
        if [ ! -f drivers/misc/Makefile ]; then
          cat > drivers/misc/Makefile <<'EOF'
obj-y += hwmon/
obj-$(CONFIG_GPU_USERSPACE_HELPER) += gpu_userspace_helper.o
EOF
        else
          # Add the obj- line if absent
          grep -q "GPU_USERSPACE_HELPER" drivers/misc/Makefile || echo "obj-$(CONFIG_GPU_USERSPACE_HELPER) += gpu_userspace_helper.o" >> drivers/misc/Makefile
        fi

        # Create drivers/misc/Kconfig (if missing)
        if [ ! -f drivers/misc/Kconfig ]; then
          cat > drivers/misc/Kconfig <<'EOF'
config GPU_USERSPACE_HELPER
	tristate "GPU userspace helper (devfreq userspace shim)"
	default y
	help
	  Minimal helper that attempts to find a GPU devfreq device and
	  expose a permissive sysfs node to set target frequency from
	  userspace. For development only.
EOF
        else
          grep -q "GPU_USERSPACE_HELPER" drivers/misc/Kconfig || cat >> drivers/misc/Kconfig <<'EOF'

config GPU_USERSPACE_HELPER
	tristate "GPU userspace helper (devfreq userspace shim)"
	default y
	help
	  Minimal helper that attempts to find a GPU devfreq device and
	  expose a permissive sysfs node to set target frequency from
	  userspace. For development only.
EOF
        fi

        # Create the C helper file
        cat > drivers/misc/gpu_userspace_helper.c <<'EOF'
// SPDX-License-Identifier: GPL-2.0
/*
 * Minimal GPU userspace helper
 *
 * Adds a permissive sysfs node and tries to set devfreq target for
 * a device named "gpu" or a custom name defined in module params.
 *
 * NOTE: This is intentionally small and conservative. It does not
 * modify your GPU driver. Adapt the 'target_devname' if your GPU
 * devfreq instance uses a different name (eg. "mtk-gpu" or "kgsl-3d0").
 */

#include <linux/module.h>
#include <linux/platform_device.h>
#include <linux/device.h>
#include <linux/sysfs.h>
#include <linux/kobject.h>
#include <linux/mutex.h>
#include <linux/err.h>
#include <linux/devfreq.h>
#include <linux/of.h>
#include <linux/of_device.h>

static char target_devname[32] = "gpu";
module_param_string(target_devname, target_devname, sizeof(target_devname), 0444);
MODULE_PARM_DESC(target_devname, "Name of the devfreq device to control (searches /sys/class/devfreq/*)");

static DEFINE_MUTEX(gpu_helper_lock);
static struct devfreq *gpu_devfreq;

#ifdef CONFIG_GPU_USERSPACE_HELPER_DEBUG
#define dbg(fmt, ...) pr_info("gpu_userspace_helper: " fmt, ##__VA_ARGS__)
#else
#define dbg(fmt, ...) do {} while (0)
#endif

static ssize_t set_freq_store(struct kobject *kobj,
                              struct kobj_attribute *attr,
                              const char *buf, size_t count)
{
    unsigned long freq;
    int ret = 0;

    if (kstrtoul(buf, 10, &freq)) {
        pr_err("gpu_userspace_helper: invalid freq input\n");
        return -EINVAL;
    }

    mutex_lock(&gpu_helper_lock);
    if (!gpu_devfreq) {
        pr_warn("gpu_userspace_helper: no devfreq device found to set %lu\n", freq);
        ret = -ENODEV;
        goto out;
    }

    {
        struct devfreq_governor *gov = gpu_devfreq->governor;
        dbg("devfreq governor=%s\n", gov ? gov->name : "none");
    }

    ret = devfreq_set_target(gpu_devfreq, freq, DEVFREQ_RELATION_L);
    if (ret)
        pr_warn("gpu_userspace_helper: devfreq_set_target returned %d for %lu\n", ret, freq);
    else
        pr_info("gpu_userspace_helper: requested freq %lu\n", freq);

out:
    mutex_unlock(&gpu_helper_lock);
    return ret ? ret : count;
}

static struct kobj_attribute set_freq_attr = __ATTR_WO(set_freq);

static int find_gpu_devfreq(void)
{
    struct device *dev;
    struct class_dev_iter iter;
    struct devfreq *df;
    int found = 0;

    /* iterate devices in class devfreq */
    {
        struct device *d;
        struct class *cls = dev_get_class("devfreq");
        if (!cls)
            return -ENODEV;
        list_for_each_entry(d, &cls->p->class_dev_attr, class_list) {
            const char *name = dev_name(d);
            if (!name)
                continue;
            if (strstr(name, target_devname)) {
                df = dev_get_drvdata(d);
                if (df) {
                    gpu_devfreq = df;
                    found = 1;
                    pr_info("gpu_userspace_helper: attached to devfreq device %s\n", name);
                    break;
                }
            }
        }
    }

    return found ? 0 : -ENODEV;
}

static int __init gpu_userspace_helper_init(void)
{
    int ret;

    pr_info("gpu_userspace_helper: init (target_devname=%s)\n", target_devname);

    ret = sysfs_create_file(kernel_kobj, &set_freq_attr.attr);
    if (ret) {
        pr_err("gpu_userspace_helper: failed to create sysfs file: %d\n", ret);
        return ret;
    }

    mutex_lock(&gpu_helper_lock);
    ret = find_gpu_devfreq();
    mutex_unlock(&gpu_helper_lock);

    if (ret)
        pr_warn("gpu_userspace_helper: no matching devfreq device found (will still expose sysfs)\n");

    return 0;
}

static void __exit gpu_userspace_helper_exit(void)
{
    pr_info("gpu_userspace_helper: exit\n");
    sysfs_remove_file(kernel_kobj, &set_freq_attr.attr);
}

module_init(gpu_userspace_helper_init);
module_exit(gpu_userspace_helper_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("CI Helper");
MODULE_DESCRIPTION("Minimal GPU userspace helper exposing set_freq sysfs");
MODULE_VERSION("0.1");
EOF

    - name: Configure Kernel (ThinLTO + SUSFS + KernelSU + GSI + GPU userspace)
      run: |
        make O=out gki_defconfig

        # Enable ThinLTO (if present)
        ./scripts/config --file out/.config \
          -e LTO_CLANG_THIN \
          -e THINLTO \
          -d LTO_NONE \
          -d LTO_CLANG_FULL || true

        # Enable SUSFS & KernelSU (your previous behavior)
        ./scripts/config --file out/.config -e SUSFS || true
        ./scripts/config --file out/.config -e KERNELSU || true

        # Make the kernel GSI-friendly (android essentials built-in)
        ./scripts/config --file out/.config -e ANDROID_BINDER_IPC || ./scripts/config --file out/.config -e ANDROID_BINDER || true
        ./scripts.config --file out/.config -e ANDROID_BINDERFS || true || true
        ./scripts/config --file out/.config -e ANDROID_ASHMEM || true

        # devtmpfs/sysfs/tmpfs and mounting helpers
        ./scripts/config --file out/.config -e DEVTMPFS || true
        ./scripts/config --file out/.config -e DEVTMPFS_MOUNT || true
        ./scripts/config --file out/.config -e SYSFS || true
        ./scripts/config --file out/.config -e TMPFS || true
        ./scripts/config --file out/.config -e DEVPTS || true

        # cgroups / namespaces
        ./scripts/config --file out/.config -e NAMESPACES || true
        ./scripts/config --file out/.config -e USER_NS || true
        ./scripts/config --file out/.config -e CGROUPS || true
        ./scripts/config --file out/.config -e CGROUP_DEVICE || true
        ./scripts/config --file out/.config -e CGROUP_PIDS || true

        # filesystems
        ./scripts/config --file out/.config -e EXT4_FS || true
        ./scripts/config --file out/.config -e F2FS_FS || true
        ./scripts/config --file out/.config -e BLK_DEV_LOOP || true
        ./scripts/config --file out/.config -e BLK_DEV_DM || true

        # security & debug
        ./scripts/config --file out/.config -e SECURITY_SELINUX || true
        ./scripts/config --file out/.config -e AUDIT || true
        ./scripts/config --file out/.config -e DEBUG_FS || true

        # DEVFREQ and userspace governor (GPU userspace control)
        ./scripts/config --file out/.config -e DEVFREQ || true
        ./scripts/config --file out/.config -e DEVFREQ_GOV_USERSPACE || true

        # enable the helper
        ./scripts/config --file out/.config -e GPU_USERSPACE_HELPER || true

        # set binder device string (best-effort)
        ./scripts/config --file out/.config --set-str ANDROID_BINDER_DEVICES "binder,hwbinder,vndbinder" || true

        # preserve localversion
        ./scripts/config --file out/.config -d LOCALVERSION
        ./scripts/config --file out/.config -e LOCALVERSION_AUTO
        echo 'CONFIG_LOCALVERSION="-COMBACT-thinlto"' >> out/.config

        # update config
        make O=out olddefconfig || true

    - name: Build Kernel + DTB
      run: |
        make -j$(nproc) O=out CC=clang LLVM=1 LLVM_IAS=1 || true
        make O=out dtbs CC=clang LLVM=1 LLVM_IAS=1 || true

    - name: Prepare AnyKernel3
      run: |
        git clone --depth=1 https://github.com/WildPlusKernel/AnyKernel3.git AnyKernel3
        cp out/arch/arm64/boot/Image AnyKernel3/Image || true
        cp out/arch/arm64/boot/dts/**/*.dtb AnyKernel3/ || true
        if [ -f out/arch/arm64/boot/dtbo.img ]; then
          cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
        fi
        cp out/.config AnyKernel3/.config || true

    - name: Pack AnyKernel3 ZIP
      run: |
        cd AnyKernel3
        zip -r9 ../CMF_Kernel-6.1.68-COMBACT-thinlto-susfs-kernelsu-gpuuserspace.zip *

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-and-anykernel
        path: |
          CMF_Kernel-6.1.68-COMBACT-thinlto-susfs-kernelsu-gpuuserspace.zip
          out/arch/arm64/boot/Image
          out/arch/arm64/boot/Image.gz-dtb
          out/arch/arm64/boot/dtbo.img
          out/.config
