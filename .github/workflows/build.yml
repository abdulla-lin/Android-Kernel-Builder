name: Build Combact Kernel (ThinLTO)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Combact Kernel
    runs-on: ubuntu-latest

    steps:
      # 1) Kernel source
      - name: Checkout Kernel Source
        uses: actions/checkout@v3
        with:
          repository: abdulla-lin/android_kernel_6.1_nothing_mt6878
          ref: main
          submodules: recursive

      # 2) Deps
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y git build-essential bc bison flex libssl-dev \
            device-tree-compiler lz4 xz-utils zstd python3 python-is-python3 \
            libelf-dev libarchive-tools pahole curl unzip \
            libncurses-dev cpio kmod openssl

      # 3) Toolchain (Neutron-Clang)
      - name: Setup Neutron-Clang Toolchain
        run: |
          mkdir -p $HOME/toolchains/neutron-clang
          cd $HOME/toolchains/neutron-clang
          curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"
          chmod +x antman
          bash antman -S

          # ---- Compiler branding wrapper ----
          # Move real clang -> clang.real and insert a wrapper that prints a custom name on --version
          CLANG_BIN="$HOME/toolchains/neutron-clang/bin/clang"
          mv "$CLANG_BIN" "$CLANG_BIN.real"
          cat > "$CLANG_BIN" <<'EOF'
          #!/bin/bash
          if [[ "$1" == "--version" ]]; then
            echo "Combact Kernel Toolchain (based on LLVM)"
            exec "$(dirname "$0")/clang.real" --version | tail -n +2
          fi
          exec "$(dirname "$0")/clang.real" "$@"
          EOF
          chmod +x "$CLANG_BIN"

          # Do the same for clang++ to avoid mixed branding
          CLANGXX_BIN="$HOME/toolchains/neutron-clang/bin/clang++"
          mv "$CLANGXX_BIN" "$CLANGXX_BIN.real"
          cat > "$CLANGXX_BIN" <<'EOF'
          #!/bin/bash
          if [[ "$1" == "--version" ]]; then
            echo "Combact Kernel Toolchain (based on LLVM)"
            exec "$(dirname "$0")/clang++.real" --version | tail -n +2
          fi
          exec "$(dirname "$0")/clang++.real" "$@"
          EOF
          chmod +x "$CLANGXX_BIN"

      # 4) Env
      - name: Set Environment Variables
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "PATH=$HOME/toolchains/neutron-clang/bin:$PATH" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=Combact" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=Kernel" >> $GITHUB_ENV
          echo "TZ=Asia/Kolkata" >> $GITHUB_ENV

      # 5) Configure (use your defconfig or ROM config target)
      #    Replace 'gki_defconfig' with your actual config target if needed.
      - name: Configure Kernel (defconfig + branding + ThinLTO)
        run: |
          mkdir -p out build
          # Use your desired defconfig target here:
          make -C $GITHUB_WORKSPACE O=$GITHUB_WORKSPACE/out ARCH=arm64 gki_defconfig

          # Enable ThinLTO + CFI (safe defaults)
          ${GITHUB_WORKSPACE}/scripts/config --file $GITHUB_WORKSPACE/out/.config \
            -e LTO_CLANG -e LTO -e THINLTO -e CFI_CLANG -e CFI_PERMISSIVE

          # Brand the kernel name shown in About phone
          ${GITHUB_WORKSPACE}/scripts/config --file $GITHUB_WORKSPACE/out/.config \
            --set-str LOCALVERSION "-CombactKernel"

          # Finalize config
          make -C $GITHUB_WORKSPACE O=$GITHUB_WORKSPACE/out ARCH=arm64 olddefconfig

      # 6) Build (LLVM + ThinLTO)
      - name: Build Kernel (ThinLTO)
        run: |
          make -C $GITHUB_WORKSPACE O=$GITHUB_WORKSPACE/out -j$(nproc) \
            ARCH=arm64 LLVM=1 LLVM_IAS=1 \
            CC=clang \
            AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump \
            STRIP=llvm-strip LD=ld.lld \
            LTO=thin

          # Ensure we have a compressed kernel for Android boot images
          if [ ! -f "$GITHUB_WORKSPACE/out/arch/arm64/boot/Image.gz" ] && [ -f "$GITHUB_WORKSPACE/out/arch/arm64/boot/Image" ]; then
            gzip -f -9 "$GITHUB_WORKSPACE/out/arch/arm64/boot/Image"
          fi

          # Collect artifacts
          cp -f $GITHUB_WORKSPACE/out/arch/arm64/boot/Image.gz $GITHUB_WORKSPACE/build/ 2>/dev/null || true
          cp -f $GITHUB_WORKSPACE/out/arch/arm64/boot/Image.gz-dtb $GITHUB_WORKSPACE/build/ 2>/dev/null || true
          cp -f $GITHUB_WORKSPACE/out/vmlinux $GITHUB_WORKSPACE/build/ 2>/dev/null || true

      # 7) Upload artifacts (no DTBO)
      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CombactKernel-Image
          path: |
            build/Image.gz
            build/Image.gz-dtb
            build/vmlinux
          if-no-files-found: warn
