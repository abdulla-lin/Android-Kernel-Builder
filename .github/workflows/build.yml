name: Build GKI Kernel (Thin LTO)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v3
        with:
          repository: abdulla-lin/android_kernel_6.1_nothing_mt6878
          ref: main
          submodules: recursive

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y git device-tree-compiler lz4 xz-utils zlib1g-dev openjdk-17-jdk gcc g++ python3 python-is-python3 p7zip-full \
              android-sdk-libsparse-utils erofs-utils default-jdk gnupg flex bison gperf build-essential zip curl libc6-dev libncurses-dev \
              libx11-dev libreadline-dev libgl1 libgl1-mesa-dev python3-markdown libxml2-utils xsltproc libtinfo6 make repo cpio kmod \
              openssl libelf-dev pahole libssl-dev libarchive-tools zstd --fix-missing
          wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb
          sudo dpkg -i libtinfo5_6.3-2ubuntu0.1_amd64.deb || true

      - name: Download and Extract Arm GNU Toolchain
        run: |
          mkdir -p $HOME/toolchains/arm-gnu
          cd $HOME/toolchains/arm-gnu
          curl -LO https://github.com/ravindu644/Android-Kernel-Tutorials/releases/download/toolchains/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
          tar -xJf arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz

      - name: Set Environment Variables
        run: |
          echo "PATH=$HOME/toolchains/arm-gnu/bin:$PATH" >> $GITHUB_ENV
          echo "CC=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-g++" >> $GITHUB_ENV
          echo "LD=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-ld" >> $GITHUB_ENV
          echo "LDFLAGS=-fuse-ld=lld" >> $GITHUB_ENV
          echo "BUILD_CC=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-gcc" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=@ravindu644" >> $GITHUB_ENV

      - name: Build Kernel with Thin LTO
        run: |
          rm -rf out build
          mkdir -p out build
          # Load defconfig
          make -C $GITHUB_WORKSPACE O=$GITHUB_WORKSPACE/out defconfig
          # Enable Thin LTO
          sed -i 's/# CONFIG_LTO_CLANG_THIN is not set/CONFIG_LTO_CLANG_THIN=y/' out/.config
          sed -i 's/# CONFIG_KERNEL_LTO_CLANG is not set/CONFIG_KERNEL_LTO_CLANG=y/' out/.config
          # Build kernel
          make -C $GITHUB_WORKSPACE O=$GITHUB_WORKSPACE/out -j$(nproc) \
            CC=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-gcc \
            AR=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-ar \
            NM=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-nm \
            LD=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-ld \
            STRIP=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-strip \
            OBJCOPY=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-objcopy \
            OBJDUMP=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-objdump \
            READELF=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-readelf \
            HOSTCC=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-gcc \
            HOSTCXX=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-g++ \
            HOSTLD=$HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-ld \
            KBUILD_BUILD_USER=@ravindu644 \
            KBUILD_BUILD_HOST=github \
            SKIP_DTBO=true
          cp $GITHUB_WORKSPACE/out/arch/arm64/boot/Image $GITHUB_WORKSPACE/build/

      - name: Verify Thin LTO
        run: |
          mkdir -p build/logs
          $HOME/toolchains/arm-gnu/bin/aarch64-none-linux-gnu-llvm-readobj --symbols build/Image | grep "LTO" > build/logs/lto_check.log || echo "No LTO symbols found" > build/logs/lto_check.log

      - name: Upload Kernel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: build/Image

      - name: Upload LTO Check Log
        uses: actions/upload-artifact@v4
        with:
          name: lto-check-log
          path: build/logs/lto_check.log
